{"ast":null,"code":"var _jsxFileName = \"C:\\\\father project\\\\software\\\\Build-Ledger\\\\build-ledger-frontend\\\\src\\\\ledger\\\\sell\\\\PaymentContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './CreateSell.css';\nimport DatePicker from 'react-datepicker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaymentContent = ({\n  formData,\n  handleInputChange,\n  paymentSchemas,\n  success,\n  totalPrice\n}) => {\n  _s();\n  const [selectedSchema, setSelectedSchema] = useState(null); // Държим избраната схема на плащане\n  const [installments, setInstallments] = useState([]); // Държим масив с вноските\n\n  // Когато потребителят избере схема на плащане\n  const handlePaymentSchemaChange = e => {\n    const selectedSchemaId = e.target.value;\n    const schema = paymentSchemas.find(s => s.id === parseInt(selectedSchemaId));\n    setSelectedSchema(schema);\n    if (schema) {\n      // Инициализиране на вноските със съответния брой текстови полета\n      const initialInstallments = Array(schema.installmentCount).fill('');\n      setInstallments(initialInstallments);\n    } else {\n      setInstallments([]);\n    }\n    handleInputChange(e); // Запазваме избраната схема в общото formData\n  };\n\n  // Обработка на промените в текстовите полета за вноските\n  const handleInstallmentChange = (index, value) => {\n    const newInstallments = [...installments];\n    newInstallments[index] = value;\n    setInstallments(newInstallments);\n\n    // Можеш да запазиш стойностите на вноските в formData, ако е необходимо\n    const updatedInstallments = newInstallments.join(','); // Пример за запазване като string с разделител \",\"\n    handleInputChange({\n      target: {\n        name: 'installments',\n        value: updatedInstallments\n      }\n    });\n  };\n  const handleDateChange = (date, name) => {\n    setFormData({\n      ...formData,\n      [name]: date\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"contract-purchaser-broker-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contract-container\",\n      children: [success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-success\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"paymentSchema\",\n          children: \"Payment Schema\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-control\",\n          id: \"paymentSchema\",\n          name: \"paymentSchemaId\",\n          value: formData.paymentSchemaId,\n          onChange: handlePaymentSchemaChange // Извикваме функцията при промяна\n          ,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a payment schema\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this), paymentSchemas.length > 0 ? paymentSchemas.map(schema => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: schema.id,\n            children: schema.title\n          }, schema.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 33\n          }, this)) : /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"Loading payment schemas...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"purchaser-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"purchaserFirstName\",\n        children: \"Installments and Dates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), selectedSchema && installments.map((installment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `installment${index + 1}`,\n          children: [\"Installment \", index + 1, \" (\", selectedSchema.percentOfInstallments[index], \"%)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          id: `installment${index + 1}`,\n          name: `installment${index + 1}`,\n          placeholder: `€`,\n          value: installment,\n          onChange: e => handleInstallmentChange(index, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"startDate\",\n            children: \"Start Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n            selected: formData.startDate,\n            onChange: date => handleDateChange(date, 'startDate'),\n            dateFormat: \"dd/MM/yyyy\",\n            className: \"form-control\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"broker-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: \"Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          id: \"description\",\n          rows: \"5\",\n          placeholder: \"Add description to this sell\",\n          value: formData.description,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(PaymentContent, \"1HFykmE+JinXUrXcChkRXmwNmng=\");\n_c = PaymentContent;\nexport default PaymentContent;\nvar _c;\n$RefreshReg$(_c, \"PaymentContent\");","map":{"version":3,"names":["React","useState","useEffect","DatePicker","jsxDEV","_jsxDEV","PaymentContent","formData","handleInputChange","paymentSchemas","success","totalPrice","_s","selectedSchema","setSelectedSchema","installments","setInstallments","handlePaymentSchemaChange","e","selectedSchemaId","target","value","schema","find","s","id","parseInt","initialInstallments","Array","installmentCount","fill","handleInstallmentChange","index","newInstallments","updatedInstallments","join","name","handleDateChange","date","setFormData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","paymentSchemaId","onChange","length","map","title","disabled","installment","percentOfInstallments","type","placeholder","selected","startDate","dateFormat","rows","description","_c","$RefreshReg$"],"sources":["C:/father project/software/Build-Ledger/build-ledger-frontend/src/ledger/sell/PaymentContent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './CreateSell.css';\r\nimport DatePicker from 'react-datepicker';\r\nconst PaymentContent = ({ formData, handleInputChange, paymentSchemas, success, totalPrice }) => {\r\n    const [selectedSchema, setSelectedSchema] = useState(null); // Държим избраната схема на плащане\r\n    const [installments, setInstallments] = useState([]); // Държим масив с вноските\r\n\r\n    // Когато потребителят избере схема на плащане\r\n    const handlePaymentSchemaChange = (e) => {\r\n        const selectedSchemaId = e.target.value;\r\n        const schema = paymentSchemas.find(s => s.id === parseInt(selectedSchemaId));\r\n        setSelectedSchema(schema);\r\n\r\n        if (schema) {\r\n            // Инициализиране на вноските със съответния брой текстови полета\r\n            const initialInstallments = Array(schema.installmentCount).fill('');\r\n            setInstallments(initialInstallments);\r\n        } else {\r\n            setInstallments([]);\r\n        }\r\n\r\n        handleInputChange(e); // Запазваме избраната схема в общото formData\r\n    };\r\n\r\n    // Обработка на промените в текстовите полета за вноските\r\n    const handleInstallmentChange = (index, value) => {\r\n        const newInstallments = [...installments];\r\n        newInstallments[index] = value;\r\n        setInstallments(newInstallments);\r\n\r\n        // Можеш да запазиш стойностите на вноските в formData, ако е необходимо\r\n        const updatedInstallments = newInstallments.join(','); // Пример за запазване като string с разделител \",\"\r\n        handleInputChange({ target: { name: 'installments', value: updatedInstallments } });\r\n    };\r\n    const handleDateChange = (date, name) => {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: date,\r\n        });\r\n      };\r\n    return (\r\n        <div className=\"contract-purchaser-broker-container\">\r\n            <div className=\"contract-container\">\r\n                {success && <div className=\"alert alert-success\">{success}</div>}\r\n\r\n                {/* Dropdown за избор на схема на плащане */}\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"paymentSchema\">Payment Schema</label>\r\n                    <select\r\n                        className=\"form-control\"\r\n                        id=\"paymentSchema\"\r\n                        name=\"paymentSchemaId\"\r\n                        value={formData.paymentSchemaId}\r\n                        onChange={handlePaymentSchemaChange} // Извикваме функцията при промяна\r\n                    >\r\n                        <option value=\"\">Select a payment schema</option>\r\n                        {paymentSchemas.length > 0 ? (\r\n                            paymentSchemas.map((schema) => (\r\n                                <option key={schema.id} value={schema.id}>\r\n                                    {schema.title}\r\n                                </option>\r\n                            ))\r\n                        ) : (\r\n                            <option value=\"\" disabled>Loading payment schemas...</option>\r\n                        )}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Винаги показваме заглавието и контейнера за вноски */}\r\n            <div className=\"purchaser-container\">\r\n                <label htmlFor=\"purchaserFirstName\">Installments and Dates</label>\r\n\r\n                {/* Генерираме текстови полета за всяка вноска само при избрана схема */}\r\n                {selectedSchema && installments.map((installment, index) => (\r\n                    <div className=\"form-group\" key={index}>\r\n                        <label htmlFor={`installment${index + 1}`}>\r\n                            Installment {index + 1} ({selectedSchema.percentOfInstallments[index]}%)\r\n                        </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id={`installment${index + 1}`}\r\n                            name={`installment${index + 1}`}\r\n                            placeholder={`€`}\r\n                            value={installment}\r\n                            onChange={(e) => handleInstallmentChange(index, e.target.value)}\r\n                        />\r\n                        <div className=\"form-group\">\r\n                <label htmlFor=\"startDate\">Start Date</label>\r\n                <DatePicker\r\n                  selected={formData.startDate}\r\n                  onChange={(date) => handleDateChange(date, 'startDate')}\r\n                  dateFormat=\"dd/MM/yyyy\"\r\n                  className=\"form-control\"\r\n                />\r\n              </div>\r\n                    </div>\r\n\r\n                    \r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"broker-container\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"description\">Notes</label>\r\n                    <textarea\r\n                        className=\"form-control\"\r\n                        id=\"description\"\r\n                        rows=\"5\"\r\n                        placeholder=\"Add description to this sell\"\r\n                        value={formData.description}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PaymentContent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}