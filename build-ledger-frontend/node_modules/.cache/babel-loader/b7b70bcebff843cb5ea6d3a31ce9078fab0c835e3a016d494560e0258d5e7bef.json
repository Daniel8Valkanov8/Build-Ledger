{"ast":null,"code":"var _jsxFileName = \"C:\\\\father project\\\\software\\\\Build-Ledger\\\\build-ledger-frontend\\\\src\\\\ledger\\\\sell\\\\modals\\\\ApartmentsModal.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllApartmentsForSaleModal = ({\n  show,\n  handleClose,\n  apartments,\n  onApartmentSelect\n}) => {\n  _s();\n  const [isSelectMode, setIsSelectMode] = useState(false);\n  const [selectedApartments, setSelectedApartments] = useState([]);\n  if (!show) return null;\n\n  // Function to reset state on modal close\n  const resetState = () => {\n    setIsSelectMode(false);\n    setSelectedApartments([]);\n  };\n  const handleCheckboxChange = apartmentId => {\n    if (selectedApartments.includes(apartmentId)) {\n      setSelectedApartments(selectedApartments.filter(id => id !== apartmentId));\n    } else {\n      setSelectedApartments([...selectedApartments, apartmentId]);\n    }\n  };\n  const handleApartmentClick = apartment => {\n    if (!isSelectMode) {\n      // If select mode is off, close the modal and pass the apartment number\n      onApartmentSelect(apartment.number); // Pass the apartment number to the parent\n      handleClose(); // Close the modal\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay-ap\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content-ap\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header-ap\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Select Apartments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleClose(); // Close the modal\n            resetState(); // Reset the state when modal closes\n          },\n          className: \"close-button\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-check form-switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-check-input\",\n            type: \"checkbox\",\n            role: \"switch\",\n            id: \"flexSwitchCheckDefault\",\n            onChange: () => setIsSelectMode(!isSelectMode)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"flexSwitchCheckDefault\",\n            children: \"Select\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"apartments-list\",\n        children: apartments.length > 0 ? apartments.map(apartment => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"apartment-item\",\n          onClick: () => handleApartmentClick(apartment),\n          children: [isSelectMode && /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-check-input\",\n            type: \"checkbox\",\n            value: apartment.id,\n            id: `apartment-${apartment.id}`,\n            checked: selectedApartments.includes(apartment.id),\n            onChange: () => handleCheckboxChange(apartment.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `apartment-${apartment.id}`,\n            className: \"apartment-number\",\n            children: apartment.number\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"apartment-price\",\n            children: [apartment.priceEur.toFixed(2), \" \\u20AC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 33\n          }, this)]\n        }, apartment.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No apartments available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(AllApartmentsForSaleModal, \"gxrR2vsvPcaHuhX0qLx1R/1eHlQ=\");\n_c = AllApartmentsForSaleModal;\nexport default AllApartmentsForSaleModal;\nvar _c;\n$RefreshReg$(_c, \"AllApartmentsForSaleModal\");","map":{"version":3,"names":["AllApartmentsForSaleModal","show","handleClose","apartments","onApartmentSelect","_s","isSelectMode","setIsSelectMode","useState","selectedApartments","setSelectedApartments","resetState","handleCheckboxChange","apartmentId","includes","filter","id","handleApartmentClick","apartment","number","_jsxDEV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","role","onChange","htmlFor","length","map","value","checked","priceEur","toFixed","_c","$RefreshReg$"],"sources":["C:/father project/software/Build-Ledger/build-ledger-frontend/src/ledger/sell/modals/ApartmentsModal.js"],"sourcesContent":["const AllApartmentsForSaleModal = ({ show, handleClose, apartments, onApartmentSelect }) => {\r\n    const [isSelectMode, setIsSelectMode] = useState(false);\r\n    const [selectedApartments, setSelectedApartments] = useState([]);\r\n\r\n    if (!show) return null;\r\n\r\n    // Function to reset state on modal close\r\n    const resetState = () => {\r\n        setIsSelectMode(false);\r\n        setSelectedApartments([]);\r\n    };\r\n\r\n    const handleCheckboxChange = (apartmentId) => {\r\n        if (selectedApartments.includes(apartmentId)) {\r\n            setSelectedApartments(selectedApartments.filter(id => id !== apartmentId));\r\n        } else {\r\n            setSelectedApartments([...selectedApartments, apartmentId]);\r\n        }\r\n    };\r\n\r\n    const handleApartmentClick = (apartment) => {\r\n        if (!isSelectMode) {\r\n            // If select mode is off, close the modal and pass the apartment number\r\n            onApartmentSelect(apartment.number); // Pass the apartment number to the parent\r\n            handleClose(); // Close the modal\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal-overlay-ap\">\r\n            <div className=\"modal-content-ap\">\r\n                <div className=\"modal-header-ap\">\r\n                    <h2>Select Apartments</h2>\r\n                    <button\r\n                        onClick={() => {\r\n                            handleClose(); // Close the modal\r\n                            resetState();   // Reset the state when modal closes\r\n                        }}\r\n                        className=\"close-button\"\r\n                    >\r\n                        Close\r\n                    </button>\r\n                    <div className=\"form-check form-switch\">\r\n                        <input\r\n                            className=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            role=\"switch\"\r\n                            id=\"flexSwitchCheckDefault\"\r\n                            onChange={() => setIsSelectMode(!isSelectMode)}\r\n                        />\r\n                        <label htmlFor=\"flexSwitchCheckDefault\">Select</label>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"apartments-list\">\r\n                    {apartments.length > 0 ? (\r\n                        apartments.map((apartment) => (\r\n                            <div \r\n                                key={apartment.id} \r\n                                className=\"apartment-item\" \r\n                                onClick={() => handleApartmentClick(apartment)}\r\n                            >\r\n                                {isSelectMode && (\r\n                                    <input\r\n                                        className=\"form-check-input\"\r\n                                        type=\"checkbox\"\r\n                                        value={apartment.id}\r\n                                        id={`apartment-${apartment.id}`}\r\n                                        checked={selectedApartments.includes(apartment.id)}\r\n                                        onChange={() => handleCheckboxChange(apartment.id)}\r\n                                    />\r\n                                )}\r\n                                <label htmlFor={`apartment-${apartment.id}`} className=\"apartment-number\">\r\n                                    {apartment.number}\r\n                                </label>\r\n                                <span className=\"apartment-price\">{apartment.priceEur.toFixed(2)} â‚¬</span>\r\n                            </div>\r\n                        ))\r\n                    ) : (\r\n                        <p>No apartments available</p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AllApartmentsForSaleModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}