{"ast":null,"code":"var _jsxFileName = \"C:\\\\father project\\\\software\\\\Build-Ledger\\\\build-ledger-frontend\\\\src\\\\apartment\\\\AllApartmentsComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport ApartmentComponent from './ApartmentComponent';\nimport UpdateApartment from './UpdateApartment'; // Импортираме UpdateApartment компонента\nimport './Apartment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllApartments = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [apartments, setApartments] = useState([]);\n  const [floors, setFloors] = useState([]); // Ново състояние за етажите\n  const [selectedApartment, setSelectedApartment] = useState(null); // За избрания апартамент\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchApartmentsAndFloors = async () => {\n      console.log(`Fetching apartments and floors for cooperation ${id}`);\n      try {\n        // Изпълняваме заявките паралелно с Promise.all\n        const [apartmentsResponse, floorsResponse] = await Promise.all([axios.get(`http://localhost:8080/apartments/${id}`), axios.get(`http://localhost:8080/floors/${id}`)]);\n\n        // Запазваме резултатите от заявките\n        setApartments(apartmentsResponse.data);\n        setFloors(floorsResponse.data);\n        console.log(\"Apartments:\", apartmentsResponse.data);\n        console.log(\"Floors:\", floorsResponse.data);\n      } catch (err) {\n        console.error(err);\n        setError('Failed to fetch apartments and floors.');\n      }\n    };\n    fetchApartmentsAndFloors();\n  }, [id]);\n\n  // Функция за показване на модала за конкретен апартамент\n  const handleAddApartment = apartment => {\n    setSelectedApartment(apartment); // Запазваме избрания апартамент\n  };\n\n  // Функция за затваряне на модала\n  const handleCloseModal = () => {\n    setSelectedApartment(null); // Затваряме модала като изчистим избрания апартамент\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Apartments in Cooperation \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"apartment-container\",\n      children: apartments.map(apartment => /*#__PURE__*/_jsxDEV(ApartmentComponent, {\n        apartment: apartment,\n        projectTitle: `Cooperation ${id}`,\n        onAddApartment: () => handleAddApartment(apartment) // Добавяме функцията за модала\n      }, apartment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), selectedApartment && /*#__PURE__*/_jsxDEV(UpdateApartment, {\n      show: !!selectedApartment,\n      handleClose: handleCloseModal,\n      apartmentNumber: selectedApartment.number,\n      cooperationNumber: id,\n      floors: floors // Предаваме списъка с етажите на модала\n      ,\n      apartmentId: selectedApartment.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(AllApartments, \"qfMQLZwGs40mqHK4uRFntoP3B0c=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = AllApartments;\nexport default AllApartments;\nvar _c;\n$RefreshReg$(_c, \"AllApartments\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","axios","ApartmentComponent","UpdateApartment","jsxDEV","_jsxDEV","AllApartments","_s","id","apartments","setApartments","floors","setFloors","selectedApartment","setSelectedApartment","error","setError","navigate","fetchApartmentsAndFloors","console","log","apartmentsResponse","floorsResponse","Promise","all","get","data","err","handleAddApartment","apartment","handleCloseModal","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","projectTitle","onAddApartment","show","handleClose","apartmentNumber","number","cooperationNumber","apartmentId","_c","$RefreshReg$"],"sources":["C:/father project/software/Build-Ledger/build-ledger-frontend/src/apartment/AllApartmentsComponent.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport ApartmentComponent from './ApartmentComponent';\r\nimport UpdateApartment from './UpdateApartment'; // Импортираме UpdateApartment компонента\r\nimport './Apartment.css';\r\n\r\nconst AllApartments = () => {\r\n    const { id } = useParams();\r\n    const [apartments, setApartments] = useState([]);\r\n    const [floors, setFloors] = useState([]); // Ново състояние за етажите\r\n    const [selectedApartment, setSelectedApartment] = useState(null); // За избрания апартамент\r\n    const [error, setError] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const fetchApartmentsAndFloors = async () => {\r\n            console.log(`Fetching apartments and floors for cooperation ${id}`);\r\n            try {\r\n                // Изпълняваме заявките паралелно с Promise.all\r\n                const [apartmentsResponse, floorsResponse] = await Promise.all([\r\n                    axios.get(`http://localhost:8080/apartments/${id}`),\r\n                    axios.get(`http://localhost:8080/floors/${id}`)\r\n                ]);\r\n\r\n                // Запазваме резултатите от заявките\r\n                setApartments(apartmentsResponse.data);\r\n                setFloors(floorsResponse.data);\r\n                console.log(\"Apartments:\", apartmentsResponse.data);\r\n                console.log(\"Floors:\", floorsResponse.data);\r\n            } catch (err) {\r\n                console.error(err);\r\n                setError('Failed to fetch apartments and floors.');\r\n            }\r\n        };\r\n\r\n        fetchApartmentsAndFloors();\r\n    }, [id]);\r\n\r\n    // Функция за показване на модала за конкретен апартамент\r\n    const handleAddApartment = (apartment) => {\r\n        setSelectedApartment(apartment); // Запазваме избрания апартамент\r\n    };\r\n\r\n    // Функция за затваряне на модала\r\n    const handleCloseModal = () => {\r\n        setSelectedApartment(null); // Затваряме модала като изчистим избрания апартамент\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Apartments in Cooperation {id}</h1>\r\n            {error && <p className=\"text-danger\">{error}</p>}\r\n            <div className=\"apartment-container\">\r\n                {apartments.map(apartment => (\r\n                    <ApartmentComponent\r\n                        key={apartment.id}\r\n                        apartment={apartment}\r\n                        projectTitle={`Cooperation ${id}`}\r\n                        onAddApartment={() => handleAddApartment(apartment)} // Добавяме функцията за модала\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            {/* Показваме модала ако има избран апартамент */}\r\n            {selectedApartment && (\r\n                <UpdateApartment\r\n                    show={!!selectedApartment}\r\n                    handleClose={handleCloseModal}\r\n                    apartmentNumber={selectedApartment.number}\r\n                    cooperationNumber={id}\r\n                    floors={floors} // Предаваме списъка с етажите на модала\r\n                    apartmentId={selectedApartment.id}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AllApartments;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,eAAe,MAAM,mBAAmB,CAAC,CAAC;AACjD,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IAAEC;EAAG,CAAC,GAAGT,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACe,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClE,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMmB,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAE9BH,SAAS,CAAC,MAAM;IACZ,MAAMqB,wBAAwB,GAAG,MAAAA,CAAA,KAAY;MACzCC,OAAO,CAACC,GAAG,CAAC,kDAAkDZ,EAAE,EAAE,CAAC;MACnE,IAAI;QACA;QACA,MAAM,CAACa,kBAAkB,EAAEC,cAAc,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC3DvB,KAAK,CAACwB,GAAG,CAAC,oCAAoCjB,EAAE,EAAE,CAAC,EACnDP,KAAK,CAACwB,GAAG,CAAC,gCAAgCjB,EAAE,EAAE,CAAC,CAClD,CAAC;;QAEF;QACAE,aAAa,CAACW,kBAAkB,CAACK,IAAI,CAAC;QACtCd,SAAS,CAACU,cAAc,CAACI,IAAI,CAAC;QAC9BP,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,kBAAkB,CAACK,IAAI,CAAC;QACnDP,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEE,cAAc,CAACI,IAAI,CAAC;MAC/C,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVR,OAAO,CAACJ,KAAK,CAACY,GAAG,CAAC;QAClBX,QAAQ,CAAC,wCAAwC,CAAC;MACtD;IACJ,CAAC;IAEDE,wBAAwB,CAAC,CAAC;EAC9B,CAAC,EAAE,CAACV,EAAE,CAAC,CAAC;;EAER;EACA,MAAMoB,kBAAkB,GAAIC,SAAS,IAAK;IACtCf,oBAAoB,CAACe,SAAS,CAAC,CAAC,CAAC;EACrC,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC3BhB,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC;EAChC,CAAC;EAED,oBACIT,OAAA;IAAA0B,QAAA,gBACI1B,OAAA;MAAA0B,QAAA,GAAI,4BAA0B,EAACvB,EAAE;IAAA;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACtCpB,KAAK,iBAAIV,OAAA;MAAG+B,SAAS,EAAC,aAAa;MAAAL,QAAA,EAAEhB;IAAK;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChD9B,OAAA;MAAK+B,SAAS,EAAC,qBAAqB;MAAAL,QAAA,EAC/BtB,UAAU,CAAC4B,GAAG,CAACR,SAAS,iBACrBxB,OAAA,CAACH,kBAAkB;QAEf2B,SAAS,EAAEA,SAAU;QACrBS,YAAY,EAAE,eAAe9B,EAAE,EAAG;QAClC+B,cAAc,EAAEA,CAAA,KAAMX,kBAAkB,CAACC,SAAS,CAAE,CAAC;MAAA,GAHhDA,SAAS,CAACrB,EAAE;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIpB,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,EAGLtB,iBAAiB,iBACdR,OAAA,CAACF,eAAe;MACZqC,IAAI,EAAE,CAAC,CAAC3B,iBAAkB;MAC1B4B,WAAW,EAAEX,gBAAiB;MAC9BY,eAAe,EAAE7B,iBAAiB,CAAC8B,MAAO;MAC1CC,iBAAiB,EAAEpC,EAAG;MACtBG,MAAM,EAAEA,MAAO,CAAC;MAAA;MAChBkC,WAAW,EAAEhC,iBAAiB,CAACL;IAAG;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAC5B,EAAA,CAtEID,aAAa;EAAA,QACAP,SAAS,EAKPC,WAAW;AAAA;AAAA8C,EAAA,GAN1BxC,aAAa;AAwEnB,eAAeA,aAAa;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}