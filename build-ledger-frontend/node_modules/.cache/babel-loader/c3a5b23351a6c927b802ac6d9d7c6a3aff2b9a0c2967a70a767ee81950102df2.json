{"ast":null,"code":"var _jsxFileName = \"C:\\\\father project\\\\software\\\\frontend\\\\build-ledger-frontend\\\\src\\\\all-projects\\\\AllProjects.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ProjectComponent from './ProjectComponent'; // Импорт на компонента за показване на всеки проект\nimport './project-component/'; // Импорт на CSS стилове (описани по-долу)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllProjects = () => {\n  _s();\n  const [projects, setProjects] = useState([]);\n\n  // Използваме useEffect за да изпратим GET заявката когато компонентът се зареди\n  useEffect(() => {\n    const fetchProjects = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/projects/all'); // URL към API-то\n        const data = await response.json();\n        setProjects(data); // Запазваме проектите в state\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      }\n    };\n    fetchProjects();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"projects-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"All Projects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), projects.length > 0 ? projects.map(project => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ProjectComponent, {\n        project: project\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"divider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 25\n      }, this), \" \"]\n    }, project.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No projects available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_s(AllProjects, \"TSrpuQX6QU8EgjQSxaAzj2u9i4o=\");\n_c = AllProjects;\nexport default AllProjects;\nvar _c;\n$RefreshReg$(_c, \"AllProjects\");","map":{"version":3,"names":["React","useState","useEffect","ProjectComponent","jsxDEV","_jsxDEV","AllProjects","_s","projects","setProjects","fetchProjects","response","fetch","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","project","id","_c","$RefreshReg$"],"sources":["C:/father project/software/frontend/build-ledger-frontend/src/all-projects/AllProjects.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ProjectComponent from './ProjectComponent'; // Импорт на компонента за показване на всеки проект\r\nimport './project-component/'; // Импорт на CSS стилове (описани по-долу)\r\n\r\nconst AllProjects = () => {\r\n    const [projects, setProjects] = useState([]);\r\n\r\n    // Използваме useEffect за да изпратим GET заявката когато компонентът се зареди\r\n    useEffect(() => {\r\n        const fetchProjects = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:8080/projects/all'); // URL към API-то\r\n                const data = await response.json();\r\n                setProjects(data); // Запазваме проектите в state\r\n            } catch (error) {\r\n                console.error('Error fetching projects:', error);\r\n            }\r\n        };\r\n\r\n        fetchProjects();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"projects-container\">\r\n            <h1>All Projects</h1>\r\n            {projects.length > 0 ? (\r\n                projects.map((project) => (\r\n                    <div key={project.id}>\r\n                        <ProjectComponent project={project} />\r\n                        <hr className=\"divider\" /> {/* Разделителна линия между проектите */}\r\n                    </div>\r\n                ))\r\n            ) : (\r\n                <p>No projects available</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AllProjects;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,gBAAgB,MAAM,oBAAoB,CAAC,CAAC;AACnD,OAAO,sBAAsB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMQ,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC,CAAC,CAAC;QACpE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCL,WAAW,CAACI,IAAI,CAAC,CAAC,CAAC;MACvB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MACpD;IACJ,CAAC;IAEDL,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIL,OAAA;IAAKY,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBAC/Bb,OAAA;MAAAa,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACpBd,QAAQ,CAACe,MAAM,GAAG,CAAC,GAChBf,QAAQ,CAACgB,GAAG,CAAEC,OAAO,iBACjBpB,OAAA;MAAAa,QAAA,gBACIb,OAAA,CAACF,gBAAgB;QAACsB,OAAO,EAAEA;MAAQ;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACtCjB,OAAA;QAAIY,SAAS,EAAC;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,KAAC;IAAA,GAFrBG,OAAO,CAACC,EAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGf,CACR,CAAC,gBAEFjB,OAAA;MAAAa,QAAA,EAAG;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC9B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACf,EAAA,CAjCID,WAAW;AAAAqB,EAAA,GAAXrB,WAAW;AAmCjB,eAAeA,WAAW;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}