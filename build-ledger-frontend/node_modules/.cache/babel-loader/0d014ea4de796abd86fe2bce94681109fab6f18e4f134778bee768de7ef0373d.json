{"ast":null,"code":"var _jsxFileName = \"C:\\\\father project\\\\Build-Ledger\\\\build-ledger-frontend\\\\src\\\\ledger\\\\sell\\\\modals\\\\GaragesModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ForSaleModal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllGaragesForSaleModal = ({\n  show,\n  handleClose,\n  garages,\n  onGaragesSelect\n}) => {\n  _s();\n  const [isSelectMode, setIsSelectMode] = useState(false);\n  const [selectedGarages, setSelectedGarages] = useState([]);\n  if (!show) return null;\n\n  // Function to reset state on modal close\n  const resetState = () => {\n    setIsSelectMode(false);\n    setSelectedGarages([]);\n  };\n  const handleCheckboxChange = garageId => {\n    if (selectedGarages.includes(garageId)) {\n      setSelectedGarages(selectedGarages.filter(id => id !== garageId));\n    } else {\n      setSelectedGarages([...selectedGarages, garageId]);\n    }\n  };\n  const handleGarageClick = garage => {\n    if (!isSelectMode) {\n      // If select mode is off, close the modal and pass the whole apartment object\n      onGaragesSelect(garage); // Pass the entire apartment object to the parent\n      handleClose(); // Close the modal\n    }\n  };\n  const handleSelectModeClose = () => {\n    // Handle closing when in select mode (if necessary)\n    if (isSelectMode && selectedGarages.length > 0) {\n      // If in select mode and apartments are selected, pass the selected apartments to the parent\n      const selectedGaragesObjects = garages.filter(garage => selectedGarages.includes(garage.id));\n      selectedGaragesObjects.forEach(garage => onGaragesSelect(garage));\n    }\n    handleClose();\n    resetState(); // Reset state on close\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay-ap\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content-ap\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header-ap\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Select Garages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (isSelectMode && selectedGarages.length > 0) {\n              // Ако сме в select mode и има избрани апартаменти\n              const selectedGarageObjects = garages.filter(garage => selectedGarages.includes(garage.id));\n              selectedGarageObjects.forEach(garage => onGaragesSelect(garage));\n              handleClose(); // Затваряме модала\n              resetState(); // Ресетваме състоянието\n            }\n          },\n          className: \"close-button\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleSelectModeClose(); // Handle select mode close logic\n          },\n          className: \"close-button\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-check form-switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-check-input\",\n            type: \"checkbox\",\n            role: \"switch\",\n            id: \"flexSwitchCheckDefault\",\n            onChange: () => setIsSelectMode(!isSelectMode)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"flexSwitchCheckDefault\",\n            children: \"Select\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"apartments-list\",\n        children: garages.length > 0 ? garages.map(garage => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"apartment-item\",\n          onClick: () => handleGarageClick(garage),\n          children: [isSelectMode && /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-check-input\",\n            type: \"checkbox\",\n            value: garage.id,\n            id: `apartment-${garage.id}`,\n            checked: selectedGarages.includes(garage.id),\n            onChange: () => handleCheckboxChange(garage.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `garage-${garage.id}`,\n            className: \"item-number\",\n            children: garage.number\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"item-price\",\n            children: [garage.priceEur.toFixed(2), \" \\u20AC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 1\n          }, this)]\n        }, garage.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No garages available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(AllGaragesForSaleModal, \"tMjmD56xjutJ9aYjctGqUJkDxmw=\");\n_c = AllGaragesForSaleModal;\nexport default AllGaragesForSaleModal;\nvar _c;\n$RefreshReg$(_c, \"AllGaragesForSaleModal\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AllGaragesForSaleModal","show","handleClose","garages","onGaragesSelect","_s","isSelectMode","setIsSelectMode","selectedGarages","setSelectedGarages","resetState","handleCheckboxChange","garageId","includes","filter","id","handleGarageClick","garage","handleSelectModeClose","length","selectedGaragesObjects","forEach","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","selectedGarageObjects","type","role","onChange","htmlFor","map","value","checked","number","priceEur","toFixed","_c","$RefreshReg$"],"sources":["C:/father project/Build-Ledger/build-ledger-frontend/src/ledger/sell/modals/GaragesModal.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './ForSaleModal.css';\r\n\r\nconst AllGaragesForSaleModal = ({ show, handleClose, garages, onGaragesSelect }) => {\r\n    const [isSelectMode, setIsSelectMode] = useState(false);\r\n    const [selectedGarages, setSelectedGarages] = useState([]);\r\n\r\n    if (!show) return null;\r\n\r\n    // Function to reset state on modal close\r\n    const resetState = () => {\r\n        setIsSelectMode(false);\r\n        setSelectedGarages([]);\r\n    };\r\n\r\n    const handleCheckboxChange = (garageId) => {\r\n        if (selectedGarages.includes(garageId)) {\r\n            setSelectedGarages(selectedGarages.filter(id => id !== garageId));\r\n        } else {\r\n            setSelectedGarages([...selectedGarages, garageId]);\r\n        }\r\n    };\r\n\r\n    const handleGarageClick = (garage) => {\r\n        if (!isSelectMode) {\r\n            // If select mode is off, close the modal and pass the whole apartment object\r\n            onGaragesSelect(garage); // Pass the entire apartment object to the parent\r\n            handleClose(); // Close the modal\r\n        }\r\n    };\r\n\r\n    const handleSelectModeClose = () => {\r\n        // Handle closing when in select mode (if necessary)\r\n        if (isSelectMode && selectedGarages.length > 0) {\r\n            // If in select mode and apartments are selected, pass the selected apartments to the parent\r\n            const selectedGaragesObjects = garages.filter(garage =>\r\n                selectedGarages.includes(garage.id)\r\n            );\r\n            selectedGaragesObjects.forEach(garage => onGaragesSelect(garage));\r\n        }\r\n        handleClose();\r\n        resetState(); // Reset state on close\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal-overlay-ap\">\r\n            <div className=\"modal-content-ap\">\r\n                <div className=\"modal-header-ap\">\r\n                    <h2>Select Garages</h2>\r\n                    <button\r\n    onClick={() => {\r\n        if (isSelectMode && selectedGarages.length > 0) {\r\n            // Ако сме в select mode и има избрани апартаменти\r\n            const selectedGarageObjects = garages.filter(garage =>\r\n                selectedGarages.includes(garage.id)\r\n            );\r\n            selectedGarageObjects.forEach(garage => onGaragesSelect(garage));\r\n            handleClose(); // Затваряме модала\r\n            resetState();  // Ресетваме състоянието\r\n        }\r\n    }}\r\n    className=\"close-button\"\r\n>\r\n    Add\r\n</button>\r\n\r\n                    <button\r\n                        onClick={() => {\r\n                            handleSelectModeClose(); // Handle select mode close logic\r\n                        }}\r\n                        className=\"close-button\"\r\n                    >\r\n                        Close\r\n                    </button>\r\n                    <div className=\"form-check form-switch\">\r\n                        <input\r\n                            className=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            role=\"switch\"\r\n                            id=\"flexSwitchCheckDefault\"\r\n                            onChange={() => setIsSelectMode(!isSelectMode)}\r\n                        />\r\n                        <label htmlFor=\"flexSwitchCheckDefault\">Select</label>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"apartments-list\">\r\n                    {garages.length > 0 ? (\r\n                        garages.map((garage) => (\r\n                            <div \r\n                                key={garage.id} \r\n                                className=\"apartment-item\" \r\n                                onClick={() => handleGarageClick(garage)}\r\n                            >\r\n                                {isSelectMode && (\r\n                                    <input\r\n                                        className=\"form-check-input\"\r\n                                        type=\"checkbox\"\r\n                                        value={garage.id}\r\n                                        id={`apartment-${garage.id}`}\r\n                                        checked={selectedGarages.includes(garage.id)}\r\n                                        onChange={() => handleCheckboxChange(garage.id)}\r\n                                    />\r\n                                )}\r\n                               <label htmlFor={`garage-${garage.id}`} className=\"item-number\">\r\n    {garage.number}\r\n</label>\r\n<span className=\"item-price\">{garage.priceEur.toFixed(2)} €</span>\r\n</div>\r\n                        ))\r\n                    ) : (\r\n                        <p>No garages available</p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AllGaragesForSaleModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}