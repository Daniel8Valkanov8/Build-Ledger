{"ast":null,"code":"var _jsxFileName = \"C:\\\\father project\\\\software\\\\Build-Ledger\\\\build-ledger-frontend\\\\src\\\\ledger\\\\payment\\\\create-payment-schema\\\\CreatePaymentSchema.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './CreatePaymentSchema.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreatePaymentSchema = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    count: '',\n    installments: []\n  });\n  const [errors, setErrors] = useState({});\n  const [success, setSuccess] = useState(null);\n\n  // Обработва промяната в полето за брой вноски\n  const handleInputChange = e => {\n    const {\n      value\n    } = e.target;\n    let newErrors = {\n      ...errors\n    };\n    let newInstallments = [];\n    if (isNaN(value)) {\n      newErrors.count = 'Value must be a number.';\n    } else if (value > 10) {\n      newErrors.count = 'Installments count cannot be more than 10.';\n    } else {\n      newErrors.count = null;\n      // Генерира полета за всяка вноска\n      newInstallments = Array.from({\n        length: Number(value)\n      }, (_, i) => ({\n        number: i + 1,\n        value: ''\n      }));\n    }\n    setFormData({\n      ...formData,\n      count: value,\n      installments: newInstallments\n    });\n    setErrors(newErrors);\n  };\n\n  // Обработва промяна в стойността на всяка отделна вноска\n  const handleInstallmentChange = (e, index) => {\n    const {\n      value\n    } = e.target;\n    const updatedInstallments = formData.installments.map((installment, i) => i === index ? {\n      ...installment,\n      value\n    } : installment);\n    setFormData({\n      ...formData,\n      installments: updatedInstallments\n    });\n  };\n\n  // Проверка дали сборът на вноските е 100\n  const validateTotal = installments => {\n    const total = installments.reduce((sum, inst) => sum + Number(inst.value), 0); // Изчислява сбора\n    return total === 100;\n  };\n\n  // Обработва изпращането на формуляра\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Проверка дали сборът на вноските е 100\n    if (!validateTotal(formData.installments)) {\n      setErrors({\n        ...errors,\n        total: 'The total percentage must be 100.'\n      });\n      return;\n    } else {\n      setErrors({\n        ...errors,\n        total: null\n      });\n    }\n\n    // Тук може да се извърши създаването на схемата, ако всичко е валидно\n    setSuccess('Schema created successfully!');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card mt-4 form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"schema-title\",\n      children: \"Create Payment Schema\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-success\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group-count\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"count\",\n          children: \"Count Installments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"count\",\n          className: `form-control no-spinner input-small ${errors.count ? 'is-invalid' : ''}`,\n          value: formData.count,\n          onChange: handleInputChange,\n          placeholder: \"Count\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), errors.count && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-feedback\",\n          children: errors.count\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), formData.installments.map((installment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group-installment\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `installment-${installment.number}`,\n          children: [\"Installment \", installment.number]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: `installment-${installment.number}`,\n          className: \"form-control input-small\",\n          placeholder: \"%\",\n          value: installment.value,\n          onChange: e => handleInstallmentChange(e, index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this)), errors.total && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"invalid-feedback text-center\",\n        children: errors.total\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-outline-primary mt-5 schema\",\n        children: \"Create Schema\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-success\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group-count\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"count\",\n          children: \"Count Installments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"count\",\n          className: `form-control no-spinner input-small ${errors.count ? 'is-invalid' : ''}`,\n          value: formData.count,\n          onChange: handleInputChange,\n          placeholder: \"Count\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), errors.count && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-feedback\",\n          children: errors.count\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), formData.installments.map((installment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group-installment\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `installment-${installment.number}`,\n          children: [\"Installment \", installment.number]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: `installment-${installment.number}`,\n          className: \"form-control input-small\",\n          placeholder: \"%\",\n          value: installment.value,\n          onChange: e => handleInstallmentChange(e, index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }, this)), errors.total && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"invalid-feedback text-center\",\n        children: errors.total\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-outline-primary mt-5 schema\",\n        children: \"Create Schema\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n_s(CreatePaymentSchema, \"C7jiZIJkRWrjKljzYedL7jPredg=\");\n_c = CreatePaymentSchema;\nexport default CreatePaymentSchema;\nvar _c;\n$RefreshReg$(_c, \"CreatePaymentSchema\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CreatePaymentSchema","_s","formData","setFormData","count","installments","errors","setErrors","success","setSuccess","handleInputChange","e","value","target","newErrors","newInstallments","isNaN","Array","from","length","Number","_","i","number","handleInstallmentChange","index","updatedInstallments","map","installment","validateTotal","total","reduce","sum","inst","handleSubmit","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","name","onChange","placeholder","id","_c","$RefreshReg$"],"sources":["C:/father project/software/Build-Ledger/build-ledger-frontend/src/ledger/payment/create-payment-schema/CreatePaymentSchema.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './CreatePaymentSchema.css';\r\n\r\nconst CreatePaymentSchema = () => {\r\n    const [formData, setFormData] = useState({\r\n        count: '',\r\n        installments: []\r\n    });\r\n    \r\n    const [errors, setErrors] = useState({});\r\n    const [success, setSuccess] = useState(null);\r\n\r\n    // Обработва промяната в полето за брой вноски\r\n    const handleInputChange = (e) => {\r\n        const { value } = e.target;\r\n\r\n        let newErrors = { ...errors };\r\n        let newInstallments = [];\r\n\r\n        if (isNaN(value)) {\r\n            newErrors.count = 'Value must be a number.';\r\n        } else if (value > 10) {\r\n            newErrors.count = 'Installments count cannot be more than 10.';\r\n        } else {\r\n            newErrors.count = null;\r\n            // Генерира полета за всяка вноска\r\n            newInstallments = Array.from({ length: Number(value) }, (_, i) => ({\r\n                number: i + 1,\r\n                value: ''\r\n            }));\r\n        }\r\n\r\n        setFormData({\r\n            ...formData,\r\n            count: value,\r\n            installments: newInstallments\r\n        });\r\n\r\n        setErrors(newErrors);\r\n    };\r\n\r\n    // Обработва промяна в стойността на всяка отделна вноска\r\n    const handleInstallmentChange = (e, index) => {\r\n        const { value } = e.target;\r\n        const updatedInstallments = formData.installments.map((installment, i) =>\r\n            i === index ? { ...installment, value } : installment\r\n        );\r\n        setFormData({\r\n            ...formData,\r\n            installments: updatedInstallments\r\n        });\r\n    };\r\n\r\n    // Проверка дали сборът на вноските е 100\r\n    const validateTotal = (installments) => {\r\n        const total = installments.reduce((sum, inst) => sum + Number(inst.value), 0); // Изчислява сбора\r\n        return total === 100;\r\n    };\r\n\r\n    // Обработва изпращането на формуляра\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Проверка дали сборът на вноските е 100\r\n        if (!validateTotal(formData.installments)) {\r\n            setErrors({ ...errors, total: 'The total percentage must be 100.' });\r\n            return;\r\n        } else {\r\n            setErrors({ ...errors, total: null });\r\n        }\r\n\r\n        // Тук може да се извърши създаването на схемата, ако всичко е валидно\r\n        setSuccess('Schema created successfully!');\r\n    };\r\n\r\n    return (\r\n        <div className=\"card mt-4 form-container\">\r\n            <h1 className='schema-title'>Create Payment Schema</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                {success && <div className=\"alert alert-success\">{success}</div>}\r\n\r\n                <div className=\"form-group-count\">\r\n                    <label htmlFor=\"count\">Count Installments</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"count\"\r\n                        className={`form-control no-spinner input-small ${errors.count ? 'is-invalid' : ''}`}\r\n                        value={formData.count}\r\n                        onChange={handleInputChange}\r\n                        placeholder=\"Count\"\r\n                    />\r\n                    {errors.count && <div className=\"invalid-feedback\">{errors.count}</div>}\r\n                </div>\r\n\r\n                {/* Генерира нови текстови полета на база въведения брой вноски */}\r\n                {formData.installments.map((installment, index) => (\r\n                    <div key={index} className=\"form-group-installment\">\r\n                        <label htmlFor={`installment-${installment.number}`}>\r\n                            Installment {installment.number}\r\n                        </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id={`installment-${installment.number}`}\r\n                            className=\"form-control input-small\"\r\n                            placeholder=\"%\"\r\n                            value={installment.value}\r\n                            onChange={(e) => handleInstallmentChange(e, index)}\r\n                        />\r\n                    </div>\r\n                ))}\r\n\r\n                {/* Показва грешка, ако сборът не е 100 при изпращане */}\r\n                {errors.total && <div className=\"invalid-feedback text-center\">{errors.total}</div>}\r\n\r\n                <button type=\"submit\" className=\"btn btn-outline-primary mt-5 schema\">\r\n                    Create Schema                \r\n                </button> \r\n            </form>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                {success && <div className=\"alert alert-success\">{success}</div>}\r\n\r\n                <div className=\"form-group-count\">\r\n                    <label htmlFor=\"count\">Count Installments</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"count\"\r\n                        className={`form-control no-spinner input-small ${errors.count ? 'is-invalid' : ''}`}\r\n                        value={formData.count}\r\n                        onChange={handleInputChange}\r\n                        placeholder=\"Count\"\r\n                    />\r\n                    {errors.count && <div className=\"invalid-feedback\">{errors.count}</div>}\r\n                </div>\r\n\r\n                {/* Генерира нови текстови полета на база въведения брой вноски */}\r\n                {formData.installments.map((installment, index) => (\r\n                    <div key={index} className=\"form-group-installment\">\r\n                        <label htmlFor={`installment-${installment.number}`}>\r\n                            Installment {installment.number}\r\n                        </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id={`installment-${installment.number}`}\r\n                            className=\"form-control input-small\"\r\n                            placeholder=\"%\"\r\n                            value={installment.value}\r\n                            onChange={(e) => handleInstallmentChange(e, index)}\r\n                        />\r\n                    </div>\r\n                ))}\r\n\r\n                {/* Показва грешка, ако сборът не е 100 при изпращане */}\r\n                {errors.total && <div className=\"invalid-feedback text-center\">{errors.total}</div>}\r\n\r\n                <button type=\"submit\" className=\"btn btn-outline-primary mt-5 schema\">\r\n                    Create Schema                \r\n                </button> \r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreatePaymentSchema;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}