{"ast":null,"code":"var _jsxFileName = \"C:\\\\father project\\\\software\\\\frontend\\\\build-ledger-frontend\\\\src\\\\parcel\\\\ParcelTemplate.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParcelTemplate = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Вземете ID-то на парцела от URL параметрите\n  const [parcel, setParcel] = useState(null);\n  const [buildings, setBuildings] = useState([]); // Съхранявайте сградите\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Функция за извличане на данни за парцела\n    const fetchParcel = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8080/parcels/${id}`); // Извлечете данните от API-то\n        setParcel(response.data); // Запазете данните в състоянието на компонента\n        // Извлечете сградите свързани с този парцел\n        const buildingsResponse = await axios.get(`http://localhost:8080/buildings/allByParcel/${id}`);\n        setBuildings(buildingsResponse.data); // Запазете сградите в състоянието на компонента\n      } catch (error) {\n        console.error('Error fetching parcel or building data:', error);\n        setError('Error fetching data');\n      }\n    };\n    fetchParcel(); // Извикайте функцията за извличане на данни\n  }, [id]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 16\n    }, this); // Покажете съобщение за грешка\n  }\n  if (!parcel) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this); // Покажете съобщение за зареждане\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"In parcel of project: \", parcel.projectTitle]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Buildings:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: buildings.map(building => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: building.title\n      }, building.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(ParcelTemplate, \"/IRn3vobMyqWZsQBlpsItGXgaz0=\", false, function () {\n  return [useParams];\n});\n_c = ParcelTemplate;\nexport default ParcelTemplate;\nvar _c;\n$RefreshReg$(_c, \"ParcelTemplate\");","map":{"version":3,"names":["React","useState","useEffect","useParams","axios","jsxDEV","_jsxDEV","ParcelTemplate","_s","id","parcel","setParcel","buildings","setBuildings","error","setError","fetchParcel","response","get","data","buildingsResponse","console","children","fileName","_jsxFileName","lineNumber","columnNumber","projectTitle","map","building","title","_c","$RefreshReg$"],"sources":["C:/father project/software/frontend/build-ledger-frontend/src/parcel/ParcelTemplate.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst ParcelTemplate = () => {\r\n    const { id } = useParams(); // Вземете ID-то на парцела от URL параметрите\r\n    const [parcel, setParcel] = useState(null);\r\n    const [buildings, setBuildings] = useState([]); // Съхранявайте сградите\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Функция за извличане на данни за парцела\r\n        const fetchParcel = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:8080/parcels/${id}`); // Извлечете данните от API-то\r\n                setParcel(response.data); // Запазете данните в състоянието на компонента\r\n                // Извлечете сградите свързани с този парцел\r\n                const buildingsResponse = await axios.get(`http://localhost:8080/buildings/allByParcel/${id}`);\r\n                setBuildings(buildingsResponse.data); // Запазете сградите в състоянието на компонента\r\n            } catch (error) {\r\n                console.error('Error fetching parcel or building data:', error);\r\n                setError('Error fetching data');\r\n            }\r\n        };\r\n\r\n        fetchParcel(); // Извикайте функцията за извличане на данни\r\n    }, [id]);\r\n\r\n    if (error) {\r\n        return <div>{error}</div>; // Покажете съобщение за грешка\r\n    }\r\n\r\n    if (!parcel) {\r\n        return <div>Loading...</div>; // Покажете съобщение за зареждане\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>In parcel of project: {parcel.projectTitle}</h1>\r\n            <h2>Buildings:</h2>\r\n            <ul>\r\n                {buildings.map(building => (\r\n                    <li key={building.id}>{building.title}</li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ParcelTemplate;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAG,CAAC,GAAGN,SAAS,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMc,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,iCAAiCT,EAAE,EAAE,CAAC,CAAC,CAAC;QACzEE,SAAS,CAACM,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;QAC1B;QACA,MAAMC,iBAAiB,GAAG,MAAMhB,KAAK,CAACc,GAAG,CAAC,+CAA+CT,EAAE,EAAE,CAAC;QAC9FI,YAAY,CAACO,iBAAiB,CAACD,IAAI,CAAC,CAAC,CAAC;MAC1C,CAAC,CAAC,OAAOL,KAAK,EAAE;QACZO,OAAO,CAACP,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;QAC/DC,QAAQ,CAAC,qBAAqB,CAAC;MACnC;IACJ,CAAC;IAEDC,WAAW,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,EAAE,CAACP,EAAE,CAAC,CAAC;EAER,IAAIK,KAAK,EAAE;IACP,oBAAOR,OAAA;MAAAgB,QAAA,EAAMR;IAAK;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,CAAC,CAAC;EAC/B;EAEA,IAAI,CAAChB,MAAM,EAAE;IACT,oBAAOJ,OAAA;MAAAgB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC,CAAC;EAClC;EAEA,oBACIpB,OAAA;IAAAgB,QAAA,gBACIhB,OAAA;MAAAgB,QAAA,GAAI,wBAAsB,EAACZ,MAAM,CAACiB,YAAY;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACpDpB,OAAA;MAAAgB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBpB,OAAA;MAAAgB,QAAA,EACKV,SAAS,CAACgB,GAAG,CAACC,QAAQ,iBACnBvB,OAAA;QAAAgB,QAAA,EAAuBO,QAAQ,CAACC;MAAK,GAA5BD,QAAQ,CAACpB,EAAE;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAsB,CAC7C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAAClB,EAAA,CA3CID,cAAc;EAAA,QACDJ,SAAS;AAAA;AAAA4B,EAAA,GADtBxB,cAAc;AA6CpB,eAAeA,cAAc;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}