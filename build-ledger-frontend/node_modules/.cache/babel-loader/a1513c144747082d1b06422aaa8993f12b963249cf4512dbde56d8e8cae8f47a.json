{"ast":null,"code":"var _jsxFileName = \"C:\\\\father project\\\\software\\\\frontend\\\\build-ledger-frontend\\\\src\\\\all-projects\\\\IndividualProjectTemplate.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IndividualProjectTemplate = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Взимаме ID на проекта от URL параметрите\n  const [project, setProject] = useState(null);\n  const [buildings, setBuildings] = useState([]); // Съхраняваме данни за сградите\n  const [error, setError] = useState(null); // Съхраняваме евентуални грешки\n\n  useEffect(() => {\n    const fetchProject = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/projects/${id}`); // GET заявка за конкретния проект\n        const data = await response.json();\n        setProject(data); // Запазваме данните за проекта в state\n\n        // Вземаме ID на парцела от респонса за проекта\n        const parcelId = data.parcelId;\n\n        // Правим GET заявка за сградите по parcelId\n        const buildingsResponse = await fetch(`http://localhost:8080/buildings/allByParcel/${project.parcelId}`);\n        const buildingsData = await buildingsResponse.json();\n        setBuildings(buildingsData); // Запазваме данните за сградите в state\n      } catch (error) {\n        console.error('Error fetching project or buildings:', error);\n        setError('Error fetching data'); // Запазваме грешка в state\n      }\n    };\n    fetchProject();\n  }, [id]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this);\n  }\n  if (!project) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading project...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Project: \", project.title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Buildings:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), buildings.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: buildings.map(building => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: building.title\n      }, building.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }, this) // Визуализиране на заглавието на всяка сграда\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No buildings found for this parcel.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(IndividualProjectTemplate, \"zrt3WJBaoaOR0617S19nVbLGu40=\", false, function () {\n  return [useParams];\n});\n_c = IndividualProjectTemplate;\nexport default IndividualProjectTemplate;\nvar _c;\n$RefreshReg$(_c, \"IndividualProjectTemplate\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","IndividualProjectTemplate","_s","id","project","setProject","buildings","setBuildings","error","setError","fetchProject","response","fetch","data","json","parcelId","buildingsResponse","buildingsData","console","children","fileName","_jsxFileName","lineNumber","columnNumber","title","length","map","building","_c","$RefreshReg$"],"sources":["C:/father project/software/frontend/build-ledger-frontend/src/all-projects/IndividualProjectTemplate.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst IndividualProjectTemplate = () => {\r\n    const { id } = useParams(); // Взимаме ID на проекта от URL параметрите\r\n    const [project, setProject] = useState(null);\r\n    const [buildings, setBuildings] = useState([]); // Съхраняваме данни за сградите\r\n    const [error, setError] = useState(null); // Съхраняваме евентуални грешки\r\n\r\n    useEffect(() => {\r\n        const fetchProject = async () => {\r\n            try {\r\n                const response = await fetch(`http://localhost:8080/projects/${id}`); // GET заявка за конкретния проект\r\n                const data = await response.json();\r\n                setProject(data); // Запазваме данните за проекта в state\r\n\r\n                // Вземаме ID на парцела от респонса за проекта\r\n                const parcelId = data.parcelId;\r\n\r\n                // Правим GET заявка за сградите по parcelId\r\n                const buildingsResponse = await fetch(`http://localhost:8080/buildings/allByParcel/${project.parcelId}`);\r\n                const buildingsData = await buildingsResponse.json();\r\n                setBuildings(buildingsData); // Запазваме данните за сградите в state\r\n            } catch (error) {\r\n                console.error('Error fetching project or buildings:', error);\r\n                setError('Error fetching data'); // Запазваме грешка в state\r\n            }\r\n        };\r\n\r\n        fetchProject();\r\n    }, [id]);\r\n\r\n    if (error) {\r\n        return <p>{error}</p>;\r\n    }\r\n\r\n    if (!project) {\r\n        return <p>Loading project...</p>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Project: {project.title}</h1> {/* Визуализиране на заглавието на проекта */}\r\n\r\n            <h2>Buildings:</h2>\r\n            {buildings.length > 0 ? (\r\n                <ul>\r\n                    {buildings.map((building) => (\r\n                        <li key={building.id}>{building.title}</li> // Визуализиране на заглавието на всяка сграда\r\n                    ))}\r\n                </ul>\r\n            ) : (\r\n                <p>No buildings found for this parcel.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default IndividualProjectTemplate;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}