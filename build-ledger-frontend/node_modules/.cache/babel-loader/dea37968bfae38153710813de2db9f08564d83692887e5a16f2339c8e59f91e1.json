{"ast":null,"code":"var _jsxFileName = \"C:\\\\father project\\\\software\\\\frontend\\\\build-ledger-frontend\\\\src\\\\all-projects\\\\IndividualProjectTemplate.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios'; // Импорт на axios\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IndividualProjectTemplate = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Взимаме ID на проекта от URL параметрите\n  const [project, setProject] = useState(null);\n  const [buildings, setBuildings] = useState([]); // Съхраняваме данни за сградите\n  const [error, setError] = useState(null); // Съхраняваме евентуални грешки\n  const [loading, setLoading] = useState(true); // Индикатор за зареждане\n\n  useEffect(() => {\n    // Функция за извличане на проекта и след това на сградите\n    const fetchProjectAndBuildings = async () => {\n      try {\n        // Първо правим заявка за проекта\n        const projectResponse = await axios.get(`http://localhost:8080/projects/${id}`);\n        const projectData = projectResponse.data;\n        setProject(projectData); // Запазваме данните за проекта в state\n\n        // След като имаме проекта, правим заявка за сградите\n        const parcelId = projectData.parcelId;\n        if (parcelId) {\n          const buildingsResponse = await axios.get(`http://localhost:8080/buildings/allByParcel/${parcelId}`);\n          setBuildings(buildingsResponse.data); // Запазваме данните за сградите\n        } else {\n          setError(\"Parcel ID is missing in the project data.\");\n        }\n      } catch (error) {\n        console.error('Error fetching project or buildings:', error);\n        setError('Error fetching data');\n      } finally {\n        setLoading(false); // Край на зареждането, независимо от резултата\n      }\n    };\n    fetchProjectAndBuildings();\n  }, [id]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading project...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Project: \", project.title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Buildings:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), buildings.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: buildings.map(building => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: building.title\n      }, building.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }, this) // Визуализиране на заглавието на всяка сграда\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No buildings found for this parcel.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(IndividualProjectTemplate, \"bkATHZ07w60Xnk/WwcgzOgi3FeM=\", false, function () {\n  return [useParams];\n});\n_c = IndividualProjectTemplate;\nexport default IndividualProjectTemplate;\nvar _c;\n$RefreshReg$(_c, \"IndividualProjectTemplate\");","map":{"version":3,"names":["React","useState","useEffect","useParams","axios","jsxDEV","_jsxDEV","IndividualProjectTemplate","_s","id","project","setProject","buildings","setBuildings","error","setError","loading","setLoading","fetchProjectAndBuildings","projectResponse","get","projectData","data","parcelId","buildingsResponse","console","children","fileName","_jsxFileName","lineNumber","columnNumber","title","length","map","building","_c","$RefreshReg$"],"sources":["C:/father project/software/frontend/build-ledger-frontend/src/all-projects/IndividualProjectTemplate.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios'; // Импорт на axios\r\n\r\nconst IndividualProjectTemplate = () => {\r\n    const { id } = useParams(); // Взимаме ID на проекта от URL параметрите\r\n    const [project, setProject] = useState(null);\r\n    const [buildings, setBuildings] = useState([]); // Съхраняваме данни за сградите\r\n    const [error, setError] = useState(null); // Съхраняваме евентуални грешки\r\n    const [loading, setLoading] = useState(true); // Индикатор за зареждане\r\n\r\n    useEffect(() => {\r\n        // Функция за извличане на проекта и след това на сградите\r\n        const fetchProjectAndBuildings = async () => {\r\n            try {\r\n                // Първо правим заявка за проекта\r\n                const projectResponse = await axios.get(`http://localhost:8080/projects/${id}`);\r\n                const projectData = projectResponse.data;\r\n                setProject(projectData); // Запазваме данните за проекта в state\r\n\r\n                // След като имаме проекта, правим заявка за сградите\r\n                const parcelId = projectData.parcelId;\r\n\r\n                if (parcelId) {\r\n                    const buildingsResponse = await axios.get(`http://localhost:8080/buildings/allByParcel/${parcelId}`);\r\n                    setBuildings(buildingsResponse.data); // Запазваме данните за сградите\r\n                } else {\r\n                    setError(\"Parcel ID is missing in the project data.\");\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching project or buildings:', error);\r\n                setError('Error fetching data');\r\n            } finally {\r\n                setLoading(false); // Край на зареждането, независимо от резултата\r\n            }\r\n        };\r\n\r\n        fetchProjectAndBuildings();\r\n    }, [id]);\r\n\r\n    if (loading) {\r\n        return <p>Loading project...</p>;\r\n    }\r\n\r\n    if (error) {\r\n        return <p>{error}</p>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Project: {project.title}</h1> {/* Визуализиране на заглавието на проекта */}\r\n\r\n            <h2>Buildings:</h2>\r\n            {buildings.length > 0 ? (\r\n                <ul>\r\n                    {buildings.map((building) => (\r\n                        <li key={building.id}>{building.title}</li> // Визуализиране на заглавието на всяка сграда\r\n                    ))}\r\n                </ul>\r\n            ) : (\r\n                <p>No buildings found for this parcel.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default IndividualProjectTemplate;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}