{"ast":null,"code":"var _jsxFileName = \"C:\\\\father project\\\\Build-Ledger\\\\build-ledger-frontend\\\\src\\\\ledger\\\\sell\\\\ObjectsPriceContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ObjectsPriceContent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ObjectsPriceContent = ({\n  formData,\n  handleInputChange,\n  success,\n  onApartmentClick,\n  onGarageClick,\n  onParkingPlaceClick,\n  selectedApartments,\n  getTotalPriceWithDiscount\n}) => {\n  _s();\n  const [totalPrice, setTotalPrice] = useState(0); // Държим общата цена\n  const [manualPrice, setManualPrice] = useState(null); // Съхраняваме ръчно въведената цена\n  const [inputPrice, setInputPrice] = useState(''); // Държим текущото съдържание на полето\n  const [discount, setDiscount] = useState(0); // Нов state за отстъпката\n  const [brokerPercent, setBrokerPercent] = useState(''); // Комисионна в проценти\n  const [brokerProfit, setBrokerProfit] = useState(''); // Комисионна в евро\n\n  useEffect(() => {\n    // Изчисляваме общата цена на базата на добавените обекти\n    const calculateTotalPrice = () => {\n      const total = selectedApartments.reduce((sum, obj) => sum + obj.priceEur, 0);\n      setTotalPrice(Math.round(total * 100) / 100); // Закръгляме до 2 знака\n    };\n    calculateTotalPrice();\n  }, [selectedApartments]);\n  const handlePriceInputChange = e => {\n    const value = e.target.value;\n    setInputPrice(value);\n  };\n  const handlePriceBlur = () => {\n    const parsedPrice = parseFloat(inputPrice);\n    setManualPrice(!isNaN(parsedPrice) ? Math.round(parsedPrice * 100) / 100 : null);\n  };\n  const handleDiscountChange = e => {\n    const value = parseFloat(e.target.value);\n    setDiscount(!isNaN(value) ? value : 0);\n  };\n  const handleBrokerPercentChange = e => {\n    const value = e.target.value;\n    setBrokerPercent(value);\n    if (value === '') {\n      setBrokerProfit('');\n      return;\n    }\n    const parsedValue = parseFloat(value);\n    const total = getCurrentPrice();\n    if (!isNaN(parsedValue) && total > 0) {\n      const profitInEur = total * parsedValue / 100;\n      setBrokerProfit(Math.round(profitInEur * 100) / 100);\n    } else {\n      setBrokerProfit('');\n    }\n  };\n  const handleBrokerProfitChange = e => {\n    const value = e.target.value;\n    setBrokerProfit(value);\n    if (value === '') {\n      setBrokerPercent('');\n      return;\n    }\n    const parsedValue = parseFloat(value);\n    const total = getCurrentPrice();\n    if (!isNaN(parsedValue) && total > 0) {\n      const percent = parsedValue / total * 100;\n      setBrokerPercent(Math.round(percent * 100) / 100);\n    } else {\n      setBrokerPercent('');\n    }\n  };\n  const getCurrentPrice = () => {\n    const basePrice = manualPrice !== null ? manualPrice : totalPrice;\n    return Math.max(basePrice - discount, 0); // Връщаме общата цена с включена отстъпка, но не по-малко от 0\n  };\n  useEffect(() => {\n    setInputPrice(getCurrentPrice().toString());\n\n    // Викаме getTotalPriceWithDiscount с новата обща цена\n    getTotalPriceWithDiscount(getCurrentPrice());\n  }, [totalPrice, manualPrice, discount, getTotalPriceWithDiscount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"contract-purchaser-broker-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(ObjectsPriceContent, \"hbVKU7hpn87H8jGJt797s579+S0=\");\n_c = ObjectsPriceContent;\nexport default ObjectsPriceContent;\nvar _c;\n$RefreshReg$(_c, \"ObjectsPriceContent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ObjectsPriceContent","formData","handleInputChange","success","onApartmentClick","onGarageClick","onParkingPlaceClick","selectedApartments","getTotalPriceWithDiscount","_s","totalPrice","setTotalPrice","manualPrice","setManualPrice","inputPrice","setInputPrice","discount","setDiscount","brokerPercent","setBrokerPercent","brokerProfit","setBrokerProfit","calculateTotalPrice","total","reduce","sum","obj","priceEur","Math","round","handlePriceInputChange","e","value","target","handlePriceBlur","parsedPrice","parseFloat","isNaN","handleDiscountChange","handleBrokerPercentChange","parsedValue","getCurrentPrice","profitInEur","handleBrokerProfitChange","percent","basePrice","max","toString","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/father project/Build-Ledger/build-ledger-frontend/src/ledger/sell/ObjectsPriceContent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './ObjectsPriceContent.css';\r\n\r\nconst ObjectsPriceContent = ({ formData, handleInputChange, success, onApartmentClick, onGarageClick, onParkingPlaceClick, selectedApartments, getTotalPriceWithDiscount }) => {\r\n    const [totalPrice, setTotalPrice] = useState(0); // Държим общата цена\r\n    const [manualPrice, setManualPrice] = useState(null); // Съхраняваме ръчно въведената цена\r\n    const [inputPrice, setInputPrice] = useState(''); // Държим текущото съдържание на полето\r\n    const [discount, setDiscount] = useState(0); // Нов state за отстъпката\r\n    const [brokerPercent, setBrokerPercent] = useState(''); // Комисионна в проценти\r\n    const [brokerProfit, setBrokerProfit] = useState(''); // Комисионна в евро\r\n\r\n    useEffect(() => {\r\n        // Изчисляваме общата цена на базата на добавените обекти\r\n        const calculateTotalPrice = () => {\r\n            const total = selectedApartments.reduce((sum, obj) => sum + obj.priceEur, 0);\r\n            setTotalPrice(Math.round(total * 100) / 100); // Закръгляме до 2 знака\r\n        };\r\n\r\n        calculateTotalPrice();\r\n    }, [selectedApartments]);\r\n\r\n    const handlePriceInputChange = (e) => {\r\n        const value = e.target.value;\r\n        setInputPrice(value);\r\n    };\r\n\r\n    const handlePriceBlur = () => {\r\n        const parsedPrice = parseFloat(inputPrice);\r\n        setManualPrice(!isNaN(parsedPrice) ? Math.round(parsedPrice * 100) / 100 : null);\r\n    };\r\n\r\n    const handleDiscountChange = (e) => {\r\n        const value = parseFloat(e.target.value);\r\n        setDiscount(!isNaN(value) ? value : 0);\r\n    };\r\n\r\n    const handleBrokerPercentChange = (e) => {\r\n        const value = e.target.value;\r\n        setBrokerPercent(value);\r\n\r\n        if (value === '') {\r\n            setBrokerProfit('');\r\n            return;\r\n        }\r\n\r\n        const parsedValue = parseFloat(value);\r\n        const total = getCurrentPrice();\r\n        if (!isNaN(parsedValue) && total > 0) {\r\n            const profitInEur = (total * parsedValue) / 100;\r\n            setBrokerProfit(Math.round(profitInEur * 100) / 100);\r\n        } else {\r\n            setBrokerProfit('');\r\n        }\r\n    };\r\n\r\n    const handleBrokerProfitChange = (e) => {\r\n        const value = e.target.value;\r\n        setBrokerProfit(value);\r\n\r\n        if (value === '') {\r\n            setBrokerPercent('');\r\n            return;\r\n        }\r\n\r\n        const parsedValue = parseFloat(value);\r\n        const total = getCurrentPrice();\r\n        if (!isNaN(parsedValue) && total > 0) {\r\n            const percent = (parsedValue / total) * 100;\r\n            setBrokerPercent(Math.round(percent * 100) / 100);\r\n        } else {\r\n            setBrokerPercent('');\r\n        }\r\n    };\r\n\r\n    const getCurrentPrice = () => {\r\n        const basePrice = manualPrice !== null ? manualPrice : totalPrice;\r\n        return Math.max(basePrice - discount, 0); // Връщаме общата цена с включена отстъпка, но не по-малко от 0\r\n    };\r\n\r\n    useEffect(() => {\r\n        setInputPrice(getCurrentPrice().toString());\r\n\r\n        // Викаме getTotalPriceWithDiscount с новата обща цена\r\n        getTotalPriceWithDiscount(getCurrentPrice());\r\n    }, [totalPrice, manualPrice, discount, getTotalPriceWithDiscount]);\r\n\r\n    return (\r\n        <div className=\"contract-purchaser-broker-container\">\r\n            {/* Останалия JSX код */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ObjectsPriceContent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,mBAAmB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,iBAAiB;EAAEC,OAAO;EAAEC,gBAAgB;EAAEC,aAAa;EAAEC,mBAAmB;EAAEC,kBAAkB;EAAEC;AAA0B,CAAC,KAAK;EAAAC,EAAA;EAC3K,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACjD,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClD,MAAM,CAACoB,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACsB,aAAa,EAAEC,gBAAgB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxD,MAAM,CAACwB,YAAY,EAAEC,eAAe,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtDC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMyB,mBAAmB,GAAGA,CAAA,KAAM;MAC9B,MAAMC,KAAK,GAAGhB,kBAAkB,CAACiB,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,CAACC,QAAQ,EAAE,CAAC,CAAC;MAC5EhB,aAAa,CAACiB,IAAI,CAACC,KAAK,CAACN,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IAClD,CAAC;IAEDD,mBAAmB,CAAC,CAAC;EACzB,CAAC,EAAE,CAACf,kBAAkB,CAAC,CAAC;EAExB,MAAMuB,sBAAsB,GAAIC,CAAC,IAAK;IAClC,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;IAC5BjB,aAAa,CAACiB,KAAK,CAAC;EACxB,CAAC;EAED,MAAME,eAAe,GAAGA,CAAA,KAAM;IAC1B,MAAMC,WAAW,GAAGC,UAAU,CAACtB,UAAU,CAAC;IAC1CD,cAAc,CAAC,CAACwB,KAAK,CAACF,WAAW,CAAC,GAAGP,IAAI,CAACC,KAAK,CAACM,WAAW,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC;EACpF,CAAC;EAED,MAAMG,oBAAoB,GAAIP,CAAC,IAAK;IAChC,MAAMC,KAAK,GAAGI,UAAU,CAACL,CAAC,CAACE,MAAM,CAACD,KAAK,CAAC;IACxCf,WAAW,CAAC,CAACoB,KAAK,CAACL,KAAK,CAAC,GAAGA,KAAK,GAAG,CAAC,CAAC;EAC1C,CAAC;EAED,MAAMO,yBAAyB,GAAIR,CAAC,IAAK;IACrC,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;IAC5Bb,gBAAgB,CAACa,KAAK,CAAC;IAEvB,IAAIA,KAAK,KAAK,EAAE,EAAE;MACdX,eAAe,CAAC,EAAE,CAAC;MACnB;IACJ;IAEA,MAAMmB,WAAW,GAAGJ,UAAU,CAACJ,KAAK,CAAC;IACrC,MAAMT,KAAK,GAAGkB,eAAe,CAAC,CAAC;IAC/B,IAAI,CAACJ,KAAK,CAACG,WAAW,CAAC,IAAIjB,KAAK,GAAG,CAAC,EAAE;MAClC,MAAMmB,WAAW,GAAInB,KAAK,GAAGiB,WAAW,GAAI,GAAG;MAC/CnB,eAAe,CAACO,IAAI,CAACC,KAAK,CAACa,WAAW,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IACxD,CAAC,MAAM;MACHrB,eAAe,CAAC,EAAE,CAAC;IACvB;EACJ,CAAC;EAED,MAAMsB,wBAAwB,GAAIZ,CAAC,IAAK;IACpC,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;IAC5BX,eAAe,CAACW,KAAK,CAAC;IAEtB,IAAIA,KAAK,KAAK,EAAE,EAAE;MACdb,gBAAgB,CAAC,EAAE,CAAC;MACpB;IACJ;IAEA,MAAMqB,WAAW,GAAGJ,UAAU,CAACJ,KAAK,CAAC;IACrC,MAAMT,KAAK,GAAGkB,eAAe,CAAC,CAAC;IAC/B,IAAI,CAACJ,KAAK,CAACG,WAAW,CAAC,IAAIjB,KAAK,GAAG,CAAC,EAAE;MAClC,MAAMqB,OAAO,GAAIJ,WAAW,GAAGjB,KAAK,GAAI,GAAG;MAC3CJ,gBAAgB,CAACS,IAAI,CAACC,KAAK,CAACe,OAAO,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IACrD,CAAC,MAAM;MACHzB,gBAAgB,CAAC,EAAE,CAAC;IACxB;EACJ,CAAC;EAED,MAAMsB,eAAe,GAAGA,CAAA,KAAM;IAC1B,MAAMI,SAAS,GAAGjC,WAAW,KAAK,IAAI,GAAGA,WAAW,GAAGF,UAAU;IACjE,OAAOkB,IAAI,CAACkB,GAAG,CAACD,SAAS,GAAG7B,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;EAC9C,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACZkB,aAAa,CAAC0B,eAAe,CAAC,CAAC,CAACM,QAAQ,CAAC,CAAC,CAAC;;IAE3C;IACAvC,yBAAyB,CAACiC,eAAe,CAAC,CAAC,CAAC;EAChD,CAAC,EAAE,CAAC/B,UAAU,EAAEE,WAAW,EAAEI,QAAQ,EAAER,yBAAyB,CAAC,CAAC;EAElE,oBACIT,OAAA;IAAKiD,SAAS,EAAC;EAAqC;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE/C,CAAC;AAEd,CAAC;AAAC3C,EAAA,CAxFIT,mBAAmB;AAAAqD,EAAA,GAAnBrD,mBAAmB;AA0FzB,eAAeA,mBAAmB;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}