{"ast":null,"code":"var _jsxFileName = \"C:\\\\father project\\\\software\\\\Build-Ledger\\\\build-ledger-frontend\\\\src\\\\ledger\\\\sell\\\\modals\\\\ParkingPlacesModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ForSaleModal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllParkingPlacesForSaleModal = ({\n  show,\n  handleClose,\n  parkingPlaces,\n  onParkingPlacesSelect\n}) => {\n  _s();\n  const [isSelectMode, setIsSelectMode] = useState(false);\n  const [selectedParkingPlaces, setSelectedParkingPlaces] = useState([]);\n  if (!show) return null;\n\n  // Function to reset state on modal close\n  const resetState = () => {\n    setIsSelectMode(false);\n    setSelectedParkingPlaces([]);\n  };\n  const handleCheckboxChange = parkingPlaceId => {\n    if (selectedParkingPlaces.includes(parkingPlaceId)) {\n      setSelectedParkingPlaces(selectedParkingPlaces.filter(id => id !== parkingPlaceId));\n    } else {\n      setSelectedParkingPlaces([...selectedParkingPlaces, parkingPlaceId]);\n    }\n  };\n  const handleGarageClick = parkingPlace => {\n    if (!isSelectMode) {\n      // If select mode is off, close the modal and pass the whole apartment object\n      onParkingPlacesSelect(parkingPlace); // Pass the entire apartment object to the parent\n      handleClose(); // Close the modal\n    }\n  };\n  const handleSelectModeClose = () => {\n    // Handle closing when in select mode (if necessary)\n    if (isSelectMode && selectedParkingPlaces.length > 0) {\n      // If in select mode and apartments are selected, pass the selected apartments to the parent\n      const selectedParkingPlacesObjects = parkingPlaces.filter(parkingPlace => selectedParkingPlaces.includes(parkingPlace.id));\n      selectedParkingPlacesObjects.forEach(parkingPlace => onParkingPlacesSelect(parkingPlace));\n    }\n    handleClose();\n    resetState(); // Reset state on close\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay-ap\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content-ap\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header-ap\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Select Parking Places\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (isSelectMode && selectedParkingPlaces.length > 0) {\n              // Ако сме в select mode и има избрани апартаменти\n              const selectedParkingPlaceObjects = parkingPlaces.filter(garage => selectedParkingPlaces.includes(garage.id));\n              selectedParkingPlaceObjects.forEach(parkingPlace => onParkingPlacesSelect(parkingPlace));\n              handleClose(); // Затваряме модала\n              resetState(); // Ресетваме състоянието\n            }\n          },\n          className: \"close-button\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleSelectModeClose(); // Handle select mode close logic\n          },\n          className: \"close-button\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-check form-switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-check-input\",\n            type: \"checkbox\",\n            role: \"switch\",\n            id: \"flexSwitchCheckDefault\",\n            onChange: () => setIsSelectMode(!isSelectMode)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"flexSwitchCheckDefault\",\n            children: \"Select\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"apartments-list\",\n        children: parkingPlaces.length > 0 ? parkingPlaces.map(parkingPlace => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"apartment-item\",\n          onClick: () => handleGarageClick(parkingPlace),\n          children: [isSelectMode && /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-check-input\",\n            type: \"checkbox\",\n            value: parkingPlace.id,\n            id: `apartment-${parkingPlace.id}`,\n            checked: selectedParkingPlaces.includes(parkingPlace.id),\n            onChange: () => handleCheckboxChange(parkingPlace.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `garage-${parkingPlace.id}`,\n            className: \"item-number\",\n            children: parkingPlace.number\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"item-price\",\n            children: [parkingPlace.priceEur.toFixed(2), \" \\u20AC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 1\n          }, this)]\n        }, parkingPlace.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No garages available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(AllParkingPlacesForSaleModal, \"e8X9lKdwVb02iKBzCbv0uxlZBbo=\");\n_c = AllParkingPlacesForSaleModal;\nexport default AllParkingPlacesForSaleModal;\nvar _c;\n$RefreshReg$(_c, \"AllParkingPlacesForSaleModal\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AllParkingPlacesForSaleModal","show","handleClose","parkingPlaces","onParkingPlacesSelect","_s","isSelectMode","setIsSelectMode","selectedParkingPlaces","setSelectedParkingPlaces","resetState","handleCheckboxChange","parkingPlaceId","includes","filter","id","handleGarageClick","parkingPlace","handleSelectModeClose","length","selectedParkingPlacesObjects","forEach","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","selectedParkingPlaceObjects","garage","type","role","onChange","htmlFor","map","value","checked","number","priceEur","toFixed","_c","$RefreshReg$"],"sources":["C:/father project/software/Build-Ledger/build-ledger-frontend/src/ledger/sell/modals/ParkingPlacesModal.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './ForSaleModal.css';\r\n\r\nconst AllParkingPlacesForSaleModal = ({ show, handleClose, parkingPlaces, onParkingPlacesSelect }) => {\r\n    const [isSelectMode, setIsSelectMode] = useState(false);\r\n    const [selectedParkingPlaces, setSelectedParkingPlaces] = useState([]);\r\n\r\n    if (!show) return null;\r\n\r\n    // Function to reset state on modal close\r\n    const resetState = () => {\r\n        setIsSelectMode(false);\r\n        setSelectedParkingPlaces([]);\r\n    };\r\n\r\n    const handleCheckboxChange = (parkingPlaceId) => {\r\n        if (selectedParkingPlaces.includes(parkingPlaceId)) {\r\n            setSelectedParkingPlaces(selectedParkingPlaces.filter(id => id !== parkingPlaceId));\r\n        } else {\r\n            setSelectedParkingPlaces([...selectedParkingPlaces, parkingPlaceId]);\r\n        }\r\n    };\r\n\r\n    const handleGarageClick = (parkingPlace) => {\r\n        if (!isSelectMode) {\r\n            // If select mode is off, close the modal and pass the whole apartment object\r\n            onParkingPlacesSelect(parkingPlace); // Pass the entire apartment object to the parent\r\n            handleClose(); // Close the modal\r\n        }\r\n    };\r\n\r\n    const handleSelectModeClose = () => {\r\n        // Handle closing when in select mode (if necessary)\r\n        if (isSelectMode && selectedParkingPlaces.length > 0) {\r\n            // If in select mode and apartments are selected, pass the selected apartments to the parent\r\n            const selectedParkingPlacesObjects = parkingPlaces.filter(parkingPlace =>\r\n                selectedParkingPlaces.includes(parkingPlace.id)\r\n            );\r\n            selectedParkingPlacesObjects.forEach(parkingPlace => onParkingPlacesSelect(parkingPlace));\r\n        }\r\n        handleClose();\r\n        resetState(); // Reset state on close\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal-overlay-ap\">\r\n            <div className=\"modal-content-ap\">\r\n                <div className=\"modal-header-ap\">\r\n                    <h2>Select Parking Places</h2>\r\n                    <button\r\n    onClick={() => {\r\n        if (isSelectMode && selectedParkingPlaces.length > 0) {\r\n            // Ако сме в select mode и има избрани апартаменти\r\n            const selectedParkingPlaceObjects = parkingPlaces.filter(garage =>\r\n                selectedParkingPlaces.includes(garage.id)\r\n            );\r\n            selectedParkingPlaceObjects.forEach(parkingPlace => onParkingPlacesSelect(parkingPlace));\r\n            handleClose(); // Затваряме модала\r\n            resetState();  // Ресетваме състоянието\r\n        }\r\n    }}\r\n    className=\"close-button\"\r\n>\r\n    Add\r\n</button>\r\n\r\n                    <button\r\n                        onClick={() => {\r\n                            handleSelectModeClose(); // Handle select mode close logic\r\n                        }}\r\n                        className=\"close-button\"\r\n                    >\r\n                        Close\r\n                    </button>\r\n                    <div className=\"form-check form-switch\">\r\n                        <input\r\n                            className=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            role=\"switch\"\r\n                            id=\"flexSwitchCheckDefault\"\r\n                            onChange={() => setIsSelectMode(!isSelectMode)}\r\n                        />\r\n                        <label htmlFor=\"flexSwitchCheckDefault\">Select</label>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"apartments-list\">\r\n                    {parkingPlaces.length > 0 ? (\r\n                        parkingPlaces.map((parkingPlace) => (\r\n                            <div \r\n                                key={parkingPlace.id} \r\n                                className=\"apartment-item\" \r\n                                onClick={() => handleGarageClick(parkingPlace)}\r\n                            >\r\n                                {isSelectMode && (\r\n                                    <input\r\n                                        className=\"form-check-input\"\r\n                                        type=\"checkbox\"\r\n                                        value={parkingPlace.id}\r\n                                        id={`apartment-${parkingPlace.id}`}\r\n                                        checked={selectedParkingPlaces.includes(parkingPlace.id)}\r\n                                        onChange={() => handleCheckboxChange(parkingPlace.id)}\r\n                                    />\r\n                                )}\r\n                               <label htmlFor={`garage-${parkingPlace.id}`} className=\"item-number\">\r\n    {parkingPlace.number}\r\n</label>\r\n<span className=\"item-price\">{parkingPlace.priceEur.toFixed(2)} €</span>\r\n</div>\r\n                        ))\r\n                    ) : (\r\n                        <p>No garages available</p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AllParkingPlacesForSaleModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}