{"ast":null,"code":"var _jsxFileName = \"C:\\\\father project\\\\software\\\\frontend\\\\build-ledger-frontend\\\\src\\\\all-projects\\\\IndividualProjectTemplate.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport ParcelComponent from '.'; // Импорт на новия компонент\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IndividualProjectTemplate = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Взимаме ID на проекта от URL параметрите\n  const [project, setProject] = useState(null);\n  const [parcel, setParcel] = useState(null); // Съхраняваме данни за парцела\n  const [error, setError] = useState(null); // Съхраняваме евентуални грешки\n\n  useEffect(() => {\n    const fetchProjectAndParcel = async () => {\n      try {\n        // Първо правим заявката за проекта\n        const projectResponse = await axios.get(`http://localhost:8080/projects/${id}`);\n        setProject(projectResponse.data); // Запазваме данните за проекта в state\n\n        // Вземаме ID на парцела от респонса за проекта\n        const parcelId = projectResponse.data.parcel;\n        console.log(\"Parcel ID:\", parcelId); // Debug: Проверете дали parcelId е валиден\n\n        if (parcelId) {\n          // Правим GET заявка за парцела по parcelId само ако parcelId е валиден\n          const parcelResponse = await axios.get(`http://localhost:8080/parcels/${parcelId}`);\n          setParcel(parcelResponse.data); // Запазваме данните за парцела в state\n        } else {\n          setError(\"Parcel ID is undefined or invalid\");\n        }\n      } catch (error) {\n        console.error('Error fetching project or parcel:', error);\n        setError('Error fetching data'); // Запазваме грешка в state\n      }\n    };\n    if (id) {\n      fetchProjectAndParcel();\n    } else {\n      setError('Project ID is undefined');\n    }\n  }, [id]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this);\n  }\n  if (!project) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading project...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Project: \", project.title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), \" \", parcel &&\n    /*#__PURE__*/\n    // Визуализираме ParcelComponent само ако парцелът е зареден\n    _jsxDEV(ParcelComponent, {\n      parcel: parcel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(IndividualProjectTemplate, \"iNS+t/p8MkjQDu+b9euk3/PW3ZI=\", false, function () {\n  return [useParams];\n});\n_c = IndividualProjectTemplate;\nexport default IndividualProjectTemplate;\nvar _c;\n$RefreshReg$(_c, \"IndividualProjectTemplate\");","map":{"version":3,"names":["React","useState","useEffect","useParams","axios","ParcelComponent","jsxDEV","_jsxDEV","IndividualProjectTemplate","_s","id","project","setProject","parcel","setParcel","error","setError","fetchProjectAndParcel","projectResponse","get","data","parcelId","console","log","parcelResponse","children","fileName","_jsxFileName","lineNumber","columnNumber","title","_c","$RefreshReg$"],"sources":["C:/father project/software/frontend/build-ledger-frontend/src/all-projects/IndividualProjectTemplate.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport ParcelComponent from '.'; // Импорт на новия компонент\r\n\r\nconst IndividualProjectTemplate = () => {\r\n    const { id } = useParams(); // Взимаме ID на проекта от URL параметрите\r\n    const [project, setProject] = useState(null);\r\n    const [parcel, setParcel] = useState(null); // Съхраняваме данни за парцела\r\n    const [error, setError] = useState(null); // Съхраняваме евентуални грешки\r\n\r\n    useEffect(() => {\r\n        const fetchProjectAndParcel = async () => {\r\n            try {\r\n                // Първо правим заявката за проекта\r\n                const projectResponse = await axios.get(`http://localhost:8080/projects/${id}`);\r\n                setProject(projectResponse.data); // Запазваме данните за проекта в state\r\n\r\n                // Вземаме ID на парцела от респонса за проекта\r\n                const parcelId = projectResponse.data.parcel;\r\n                console.log(\"Parcel ID:\", parcelId); // Debug: Проверете дали parcelId е валиден\r\n\r\n                if (parcelId) {\r\n                    // Правим GET заявка за парцела по parcelId само ако parcelId е валиден\r\n                    const parcelResponse = await axios.get(`http://localhost:8080/parcels/${parcelId}`);\r\n                    setParcel(parcelResponse.data); // Запазваме данните за парцела в state\r\n                } else {\r\n                    setError(\"Parcel ID is undefined or invalid\");\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching project or parcel:', error);\r\n                setError('Error fetching data'); // Запазваме грешка в state\r\n            }\r\n        };\r\n\r\n        if (id) {\r\n            fetchProjectAndParcel();\r\n        } else {\r\n            setError('Project ID is undefined');\r\n        }\r\n    }, [id]);\r\n\r\n    if (error) {\r\n        return <p>{error}</p>;\r\n    }\r\n\r\n    if (!project) {\r\n        return <p>Loading project...</p>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Project: {project.title}</h1> {/* Визуализиране на заглавието на проекта */}\r\n\r\n            {parcel && ( // Визуализираме ParcelComponent само ако парцелът е зареден\r\n                <ParcelComponent parcel={parcel} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default IndividualProjectTemplate;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}